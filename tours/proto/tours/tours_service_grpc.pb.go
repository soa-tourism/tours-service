// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v5.26.1
// source: tours_service.proto

package tours

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Tour_GetEquipment_FullMethodName = "/Tour/GetEquipment"
)

// TourClient is the client API for Tour service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TourClient interface {
	GetEquipment(ctx context.Context, in *EquipmentId, opts ...grpc.CallOption) (*EquipmentResponse, error)
}

type tourClient struct {
	cc grpc.ClientConnInterface
}

func NewTourClient(cc grpc.ClientConnInterface) TourClient {
	return &tourClient{cc}
}

func (c *tourClient) GetEquipment(ctx context.Context, in *EquipmentId, opts ...grpc.CallOption) (*EquipmentResponse, error) {
	out := new(EquipmentResponse)
	err := c.cc.Invoke(ctx, Tour_GetEquipment_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TourServer is the server API for Tour service.
// All implementations must embed UnimplementedTourServer
// for forward compatibility
type TourServer interface {
	GetEquipment(context.Context, *EquipmentId) (*EquipmentResponse, error)
	mustEmbedUnimplementedTourServer()
}

// UnimplementedTourServer must be embedded to have forward compatible implementations.
type UnimplementedTourServer struct {
}

func (UnimplementedTourServer) GetEquipment(context.Context, *EquipmentId) (*EquipmentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEquipment not implemented")
}
func (UnimplementedTourServer) mustEmbedUnimplementedTourServer() {}

// UnsafeTourServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TourServer will
// result in compilation errors.
type UnsafeTourServer interface {
	mustEmbedUnimplementedTourServer()
}

func RegisterTourServer(s grpc.ServiceRegistrar, srv TourServer) {
	s.RegisterService(&Tour_ServiceDesc, srv)
}

func _Tour_GetEquipment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EquipmentId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TourServer).GetEquipment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Tour_GetEquipment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TourServer).GetEquipment(ctx, req.(*EquipmentId))
	}
	return interceptor(ctx, in, info, handler)
}

// Tour_ServiceDesc is the grpc.ServiceDesc for Tour service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Tour_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "Tour",
	HandlerType: (*TourServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetEquipment",
			Handler:    _Tour_GetEquipment_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "tours_service.proto",
}
